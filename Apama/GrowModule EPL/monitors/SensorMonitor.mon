using com.apama.cumulocity.Alarm;
using com.apama.cumulocity.FindAlarm;
using com.apama.cumulocity.FindAlarmResponse;
using com.apama.cumulocity.FindAlarmResponseAck;
using com.apama.cumulocity.Measurement;
using com.apama.cumulocity.MeasurementValue;
using com.apama.cumulocity.Operation;

/** This monitor is responsible for calculating Dew Point values and handling alarms  */
monitor SensorMonitor {
	
    event DewPoint {
        string source;
        float dewValue;
        string unit;
    }
	
	action onload() {		
		monitor.subscribe(Measurement.CHANNEL);
		
		on all Measurement(type = "c8y_MoistureSensor") as m {
			
			log m.toString() at INFO;
			
			// Manage alarms based upon soil moisture measurement values
			handleAlarm(m);				
		}
		
		// correlate temp and humidity measurements by device
		from mt in all Measurement(type="c8y_TemperatureSensor") retain 1
		join mh in all Measurement(type="c8y_HumiditySensor") retain 1
		  on mt.source equals mh.source
		  select DewPoint(mt.source, calculateDewPoint(mt, mh), "C") as dewPoint{
			  send Measurement("", "c8y_DewPointTemperature", dewPoint.source, currentTime,
	            {"c8y_DewPointTemperature":
	            {"T":MeasurementValue(dewPoint.dewValue, dewPoint.unit, new dictionary<string,any>)}
	            }, new dictionary<string,any>) to Measurement.CREATE_CHANNEL;
	        }
		}

		
	action calculateDewPoint(Measurement mt, Measurement mh) returns float {
		float temp := mt.measurements["c8y_TemperatureSensor"]["T"].value;
		float humidity := mh.measurements["c8y_HumiditySensor"]["h"].value;		
        float dewPoint := temp - ((100.0 - humidity) / 5.0);
        log "Temperature / Humidity / Dewpoint: " + temp.toString() + " / " + humidity.toString() + " / " + dewPoint.toString() at INFO;
        return dewPoint;
	}
	
	action handleAlarm(Measurement m){
		monitor.subscribe(FindAlarmResponse.CHANNEL);
		print "In handle alarm";
		// create search params to find existing alarm
		integer reqId := integer.getUnique();
		FindAlarm findAlarm := new FindAlarm;
		findAlarm.reqId := reqId;
		findAlarm.params["type"] := "Moisture Alarm";
		findAlarm.params["source"] := m.source;
		findAlarm.params["status"] := "ACTIVE";
		
		print "sending" + findAlarm.toString() + "to channel " + FindAlarm.CHANNEL;
		send findAlarm to FindAlarm.CHANNEL;
		
		// Example: https://cumulocity.com/guides/concepts/realtime/
		on all FindAlarmResponseAck(reqId = reqId) {
            monitor.unsubscribe(FindAlarmResponse.CHANNEL);
        }
		
		Alarm existingAlarm := new Alarm;
		
		on all FindAlarmResponse(reqId=findAlarm.reqId) as resp {
			print "Existing Alarm Search Results:";
			print resp.toString();
			existingAlarm := resp.alarm;
					
			// search complete
			print "Returned Alarm:" + existingAlarm.toString();

			if m.measurements["c8y_MoistureSensor"]["moisture"].value > 40.0 {
				// Water level is now sufficient, we can cancel the alarm
				existingAlarm.status := "CLEARED";
				print "Sending Alarm : " + existingAlarm.toString();
				send existingAlarm to Alarm.CHANNEL;
				
				
				triggerDeviceNotification(m.source, false);
			}
		}	
		
		on (FindAlarmResponseAck(reqId = reqId) and not FindAlarmResponse() within (3.0))  {
			// empty alarm or active alarm was not found
			print "Alarm not found...";
			
			if m.measurements["c8y_MoistureSensor"]["moisture"].value < 40.0 {
				// soil moisture low, create an alarm
				print "Creating alarm...";
				createAlarm(m);
			}
		}
		
	}
	
	action createAlarm(Measurement m) {
		Alarm alarm := new Alarm;
		
		alarm.source := m.source;
		alarm.type := "Moisture Alarm";
		alarm.status := "ACTIVE";
		alarm.time := currentTime;
		
		float minor_lvl := 40.0;
		float major_lvl := 30.0;
		float crit_lvl := 20.0;
		boolean signal_attention := false;

		float moisture := m.measurements["c8y_MoistureSensor"]["moisture"].value;
		
		if moisture <= minor_lvl and moisture > major_lvl{
			alarm.severity := "MINOR";
			alarm.text := "Soil is almost dry, watering required.";
		} else if moisture <= major_lvl and moisture > crit_lvl {
			alarm.severity := "MAJOR";
			alarm.text := "Soil is dry, please water ASAP.";
			signal_attention := true;
			
		} else if moisture <= crit_lvl {
			alarm.severity := "CRITICAL";
			alarm.text := "Soil is completely dry, plant is wilting.";
			signal_attention := true;
		}
		
		send alarm to Alarm.CHANNEL;
		
		if signal_attention = true {
			print "Enabling Grow Device notification... ";
			triggerDeviceNotification(m.source, true);
		}
	}
	
	action triggerDeviceNotification(string source, boolean enable) {
		print "Setting Grow Device " + source + " notification state to " + enable.toString();
		
		if enable = true {
			send Operation("", source, "PENDING", {"c8y_Command":<any> {"text":"set alert on"} }) to Operation.CHANNEL;
		} else {
			send Operation("", source, "PENDING", {"c8y_Command":<any> {"text":"set alert off"} }) to Operation.CHANNEL;
		}
	}
}		
	
